{"ast":null,"code":"var lib = require('./lib');\n/** Uin8Array with zero items */\n\n\nvar EMPTY_UINT8_ARRAY = new Uint8Array(0);\n/**\n * Generates the Name-Based UUID hashes v3 and v5 according to RFC-4122\n * https://tools.ietf.org/html/rfc4122#section-4.3\n * @param {string} target Hashing target\n * @param {string} [namespace] Some name space within which generation occurs\n * @param {3|5} [version=5] Version of UUID. Available versions is 3 and 5\n * according to RFC-4122. The version is responsible for the hashing algorithm:\n * version 3 uses MD5, and version 5 uses SHA-1. Default is 5.\n * @returns {string} UUID\n */\n\nfunction generateUuid(target, namespace, version) {\n  if (typeof target !== 'string') {\n    throw TypeError('Value must be string');\n  }\n\n  if (typeof namespace === 'number') {\n    return generateUuid(target, undefined, namespace);\n  }\n\n  if (version == null) {\n    return generateUuid(target, namespace, 5);\n  }\n\n  if (version !== 3 && version !== 5) {\n    throw TypeError('Version of UUID can be only 3 or 5');\n  } // Parsing target chars\n\n\n  var charBuffer = lib.stringToCharBuffer(target); // TODO: Test namespace for uuid and parse to buffer\n\n  var namespaceCharBuffer = typeof namespace === 'string' ? lib.stringToCharBuffer(namespace) : EMPTY_UINT8_ARRAY; // Concatenation two buffers of strings to one\n\n  var buffer = lib.concatBuffers(namespaceCharBuffer, charBuffer); // Getting hash\n\n  var hash = version === 3 ? lib.md5Hash(buffer) : lib.sha1Hash(buffer);\n  return lib.hashToUuid(hash, version);\n}\n/**\n * Export module\n */\n\n\nmodule.exports = generateUuid;","map":{"version":3,"sources":["/Users/asdasgup/Downloads/facebook-clone/facebook-clone/node_modules/uuid-by-string/src/index.js"],"names":["lib","require","EMPTY_UINT8_ARRAY","Uint8Array","generateUuid","target","namespace","version","TypeError","undefined","charBuffer","stringToCharBuffer","namespaceCharBuffer","buffer","concatBuffers","hash","md5Hash","sha1Hash","hashToUuid","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAjB;AAEA;;;AACA,IAAIC,iBAAiB,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,OAAzC,EAAkD;AAChD,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAMG,SAAS,CAAC,sBAAD,CAAf;AACD;;AAED,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOF,YAAY,CAACC,MAAD,EAASI,SAAT,EAAoBH,SAApB,CAAnB;AACD;;AAED,MAAIC,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOH,YAAY,CAACC,MAAD,EAASC,SAAT,EAAoB,CAApB,CAAnB;AACD;;AAED,MAAIC,OAAO,KAAK,CAAZ,IAAiBA,OAAO,KAAK,CAAjC,EAAoC;AAClC,UAAMC,SAAS,CAAC,oCAAD,CAAf;AACD,GAf+C,CAiBhD;;;AACA,MAAIE,UAAU,GAAGV,GAAG,CAACW,kBAAJ,CAAuBN,MAAvB,CAAjB,CAlBgD,CAoBhD;;AACA,MAAIO,mBAAmB,GAAG,OAAON,SAAP,KAAqB,QAArB,GAAgCN,GAAG,CAACW,kBAAJ,CAAuBL,SAAvB,CAAhC,GAAoEJ,iBAA9F,CArBgD,CAuBhD;;AACA,MAAIW,MAAM,GAAGb,GAAG,CAACc,aAAJ,CAAkBF,mBAAlB,EAAuCF,UAAvC,CAAb,CAxBgD,CA0BhD;;AACA,MAAIK,IAAI,GAAGR,OAAO,KAAK,CAAZ,GAAgBP,GAAG,CAACgB,OAAJ,CAAYH,MAAZ,CAAhB,GAAsCb,GAAG,CAACiB,QAAJ,CAAaJ,MAAb,CAAjD;AAEA,SAAOb,GAAG,CAACkB,UAAJ,CAAeH,IAAf,EAAqBR,OAArB,CAAP;AACD;AAED;AACA;AACA;;;AACAY,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["var lib = require('./lib');\n\n/** Uin8Array with zero items */\nvar EMPTY_UINT8_ARRAY = new Uint8Array(0);\n\n/**\n * Generates the Name-Based UUID hashes v3 and v5 according to RFC-4122\n * https://tools.ietf.org/html/rfc4122#section-4.3\n * @param {string} target Hashing target\n * @param {string} [namespace] Some name space within which generation occurs\n * @param {3|5} [version=5] Version of UUID. Available versions is 3 and 5\n * according to RFC-4122. The version is responsible for the hashing algorithm:\n * version 3 uses MD5, and version 5 uses SHA-1. Default is 5.\n * @returns {string} UUID\n */\nfunction generateUuid(target, namespace, version) {\n  if (typeof target !== 'string') {\n    throw TypeError('Value must be string');\n  }\n\n  if (typeof namespace === 'number') {\n    return generateUuid(target, undefined, namespace);\n  }\n\n  if (version == null) {\n    return generateUuid(target, namespace, 5);\n  }\n\n  if (version !== 3 && version !== 5) {\n    throw TypeError('Version of UUID can be only 3 or 5');\n  }\n\n  // Parsing target chars\n  var charBuffer = lib.stringToCharBuffer(target);\n\n  // TODO: Test namespace for uuid and parse to buffer\n  var namespaceCharBuffer = typeof namespace === 'string' ? lib.stringToCharBuffer(namespace) : EMPTY_UINT8_ARRAY;\n\n  // Concatenation two buffers of strings to one\n  var buffer = lib.concatBuffers(namespaceCharBuffer, charBuffer);\n\n  // Getting hash\n  var hash = version === 3 ? lib.md5Hash(buffer) : lib.sha1Hash(buffer);\n\n  return lib.hashToUuid(hash, version);\n}\n\n/**\n * Export module\n */\nmodule.exports = generateUuid;\n"]},"metadata":{},"sourceType":"script"}