{"ast":null,"code":"var md5 = require('js-md5');\n\nvar sha1 = require('js-sha1');\n/** List of hex digit for fast accessing by index */\n\n\nvar HEX_DIGITS = '0123456789abcdef'.split('');\n/**\n * Converts unsigned byte to hex representation\n * @param {number} ubyte The unsigned byte to convert\n * @returns {string} The hex representation\n */\n\nvar uint8ToHex = function (ubyte) {\n  var first = ubyte >> 4;\n  var second = ubyte - (first << 4);\n  return HEX_DIGITS[first] + HEX_DIGITS[second];\n};\n/**\n * Converts unsigned byte buffer to hex string\n * @param {Uint8Array} buf The unsigned bytes buffer\n * @returns {string} The hex string representation\n */\n\n\nvar uint8ArrayToHex = function (buf) {\n  var out = [];\n\n  for (var i = 0; i < buf.length; i++) {\n    out.push(uint8ToHex(buf[i]));\n  }\n\n  return out.join('');\n};\n/**\n * Converts string to buffer of char codes\n * @param {string} str The string to parse\n * @returns {Uint8Array} Buffer of char codes\n */\n\n\nvar stringToCharBuffer = function (str) {\n  var buffer = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buffer[i] = str[i].charCodeAt(0);\n  }\n\n  return buffer;\n};\n/**\n * Generates MD5 hash from buffer\n * @param {Uint8Array} buf Buffer of char codes\n * @returns {Uint8Array} MD5 hash buffer\n */\n\n\nvar md5Hash = function (buf) {\n  return new Uint8Array(md5.arrayBuffer(buf));\n};\n/**\n * Generates SHA-1 hash from buffer\n * @param {Uint8Array} buf Buffer of char codes\n * @returns {Uint8Array} SHA-1 hash buffer\n */\n\n\nvar sha1Hash = function (buf) {\n  return new Uint8Array(sha1.arrayBuffer(buf));\n};\n/**\n * Concatenates two uint8 buffers\n * @param {Uint8Array} buf1 The first buffer to concatenate\n * @param {Uint8Array} buf2 The second buffer to concatenate\n * @returns {Uint8Array} Concatenation result\n */\n\n\nvar concatBuffers = function (buf1, buf2) {\n  var out = new Uint8Array(buf1.length + buf2.length);\n  out.set(new Uint8Array(buf1), 0);\n  out.set(new Uint8Array(buf2), buf1.byteLength);\n  return out;\n};\n/**\n * Creates uuid from hash buffer\n * @param {Uint8Array} hashBuffer Hash buffer\n * @param {3|5} version Version of uuid\n * @returns {string} The uuid\n */\n\n\nvar hashToUuid = function (hashBuffer, version) {\n  return [// The low field of the timestamp\n  uint8ArrayToHex(hashBuffer.slice(0, 4)), '-', // The middle field of the timestamp\n  uint8ArrayToHex(hashBuffer.slice(4, 6)), '-', // The high field of the timestamp multiplexed with the version number\n  uint8ToHex(hashBuffer[6] & 0x0f | parseInt(version * 10, 16)), uint8ToHex(hashBuffer[7]), '-', // The high field of the clock sequence multiplexed with the variant\n  uint8ToHex(hashBuffer[8] & 0x3f | 0x80), // The low field of the clock sequence\n  uint8ToHex(hashBuffer[9]), '-', //  The spatially unique node identifier\n  uint8ArrayToHex(hashBuffer.slice(10, 16))].join('');\n};\n\nmodule.exports = {\n  uint8ToHex,\n  uint8ArrayToHex,\n  stringToCharBuffer,\n  md5Hash,\n  sha1Hash,\n  concatBuffers,\n  hashToUuid\n};","map":{"version":3,"sources":["/Users/asdasgup/Downloads/facebook-clone/facebook-clone/node_modules/uuid-by-string/src/lib.js"],"names":["md5","require","sha1","HEX_DIGITS","split","uint8ToHex","ubyte","first","second","uint8ArrayToHex","buf","out","i","length","push","join","stringToCharBuffer","str","buffer","Uint8Array","charCodeAt","md5Hash","arrayBuffer","sha1Hash","concatBuffers","buf1","buf2","set","byteLength","hashToUuid","hashBuffer","version","slice","parseInt","module","exports"],"mappings":"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","sourcesContent":["var md5 = require('js-md5');\nvar sha1 = require('js-sha1');\n\n/** List of hex digit for fast accessing by index */\nvar HEX_DIGITS = '0123456789abcdef'.split('');\n\n/**\n * Converts unsigned byte to hex representation\n * @param {number} ubyte The unsigned byte to convert\n * @returns {string} The hex representation\n */\nvar uint8ToHex = function(ubyte) {\n  var first = ubyte >> 4;\n  var second = ubyte - (first << 4);\n\n  return HEX_DIGITS[first] + HEX_DIGITS[second];\n};\n\n/**\n * Converts unsigned byte buffer to hex string\n * @param {Uint8Array} buf The unsigned bytes buffer\n * @returns {string} The hex string representation\n */\nvar uint8ArrayToHex = function(buf) {\n  var out = [];\n\n  for (var i = 0; i < buf.length; i++) {\n    out.push(uint8ToHex(buf[i]));\n  }\n\n  return out.join('');\n};\n\n/**\n * Converts string to buffer of char codes\n * @param {string} str The string to parse\n * @returns {Uint8Array} Buffer of char codes\n */\nvar stringToCharBuffer = function(str) {\n  var buffer = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buffer[i] = str[i].charCodeAt(0);\n  }\n\n  return buffer;\n};\n\n/**\n * Generates MD5 hash from buffer\n * @param {Uint8Array} buf Buffer of char codes\n * @returns {Uint8Array} MD5 hash buffer\n */\nvar md5Hash = function(buf) {\n  return new Uint8Array(md5.arrayBuffer(buf));\n};\n\n/**\n * Generates SHA-1 hash from buffer\n * @param {Uint8Array} buf Buffer of char codes\n * @returns {Uint8Array} SHA-1 hash buffer\n */\nvar sha1Hash = function(buf) {\n  return new Uint8Array(sha1.arrayBuffer(buf));\n};\n\n/**\n * Concatenates two uint8 buffers\n * @param {Uint8Array} buf1 The first buffer to concatenate\n * @param {Uint8Array} buf2 The second buffer to concatenate\n * @returns {Uint8Array} Concatenation result\n */\nvar concatBuffers = function(buf1, buf2) {\n  var out = new Uint8Array(buf1.length + buf2.length);\n\n  out.set(new Uint8Array(buf1), 0);\n  out.set(new Uint8Array(buf2), buf1.byteLength);\n\n  return out;\n};\n\n/**\n * Creates uuid from hash buffer\n * @param {Uint8Array} hashBuffer Hash buffer\n * @param {3|5} version Version of uuid\n * @returns {string} The uuid\n */\nvar hashToUuid = function(hashBuffer, version) {\n  return [\n    // The low field of the timestamp\n    uint8ArrayToHex(hashBuffer.slice(0, 4)),\n    '-',\n\n    // The middle field of the timestamp\n    uint8ArrayToHex(hashBuffer.slice(4, 6)),\n    '-',\n\n    // The high field of the timestamp multiplexed with the version number\n    uint8ToHex((hashBuffer[6] & 0x0f) | parseInt(version * 10, 16)),\n    uint8ToHex(hashBuffer[7]),\n    '-',\n\n    // The high field of the clock sequence multiplexed with the variant\n    uint8ToHex((hashBuffer[8] & 0x3f) | 0x80),\n    // The low field of the clock sequence\n    uint8ToHex(hashBuffer[9]),\n    '-',\n    //  The spatially unique node identifier\n\n    uint8ArrayToHex(hashBuffer.slice(10, 16))\n  ].join('');\n};\n\nmodule.exports = {\n  uint8ToHex,\n  uint8ArrayToHex,\n  stringToCharBuffer,\n  md5Hash,\n  sha1Hash,\n  concatBuffers,\n  hashToUuid\n};\n"]},"metadata":{},"sourceType":"script"}